숙제) 오늘날짜의 가장 많이 판매된 세권의 도서의   도서별 총판매수를 
				출력하는view를 만들고
				이것의 결과를 출력하는 웹 문서를 작성해 봅니다.

- 판매번호 15번 이후의 판매일은 오늘날짜로 수정
update orders set orderdate = sysdate where orderid >=15;
				
- 오늘날짜에 판매된 도서이름별 판매수

select bookname, count(saleprice) cnt 
from book b, orders o
where b.bookid = o.bookid and
to_char(sysdate, 'yyyy/mm/dd') = to_char(orderdate,'yyyy/mm/dd')
group by bookname
order by count(saleprice) desc;


select * from ( select bookname, count(saleprice) cnt 
from book b, orders o
where b.bookid = o.bookid and
to_char(sysdate, 'yyyy/mm/dd') = to_char(orderdate,'yyyy/mm/dd')
group by bookname
order by count(saleprice) desc)
where rownum <= 3;

create view today_top3 as 
select * from ( select bookname, count(saleprice) cnt 
from book b, orders o
where b.bookid = o.bookid and
to_char(sysdate, 'yyyy/mm/dd') = to_char(orderdate,'yyyy/mm/dd')
group by bookname
order by count(saleprice) desc)
where rownum <= 3;

select * from today_top3;



트리거,
function,
데이터모델링




--------------------------------------------------------------------------

PL/SQL
	==> 오라클이 제공하는 프로그래밍 언어
	
* PL/SQL 종류
		- procedure
					자바의 메소드처럼 만들어 두고 호출하여 
							insert, update, delete, select 할 수 있어요.
					        매개변수가 있을수도, 매개변수가 없을 수도 있고
					        리턴값이 있을수도 있고 리턴값이 없을 수도 있고
					
		- trigger
					sql명령어의 이벤트처리를 위한 것으로써
					어떤 A테이블에 insert, update, delete가 발생되면 
					연관있는 B테이블에 연쇄하여 insert, update, delete를 
					자동으로 하게 만드는 것을 말합니다.
		
		- function
					프로시저와 마찬가치로 사용되는데 
					이것은 select절에 사용할 용도로 만들어요.
					반드시 반환값이 있도록 만들어야 합니다.
					
					select count(saleprice) from orders;
					위의 sql에서 사용한 count처럼 
					select 절에 사용할 함수를 만들때에는 
					function으로 만들어요.

-------------------------------------------------------------------------------------------------

** 프로시저 만들기
create or replace procedure 프로시저이름
(
	매개변수1 [모드] 자료형,
	매개변수2 [모드] 자료형,
	..
)
as
	지역변수명1 자료형;
	지역변수명2 자료형;
begin
	프로시저에 해야할 명령어(들)
end;
/

** 모드에는 in, out이 있어요.
		in은 프로시저를 실행하기에 필요한 값을 읽어 들이기 위한 입력용 이며
		out를 프로시저 수행한 결과를 반환하기 위한 출력용입니다.
		out모드의 변수를 여러개 전달받아 
		여러개의 값을 반환 할 수 있어요.
		또, 모드를 생략하면 기본은 in입니다.

** 자료형은 어떤 테이블의 컬럼의 자료형과 동일한 자료형을 표현 할 때에는 
	테이블명.컬럼명%type
	으로 표현합니다.
	
** begin  과 end; 사이에 프로시저에 해야할 
		명령어들을 써 줍니다.
		
		여기에는 sql명령어(insert, update, delete, select)가 올 수 있으며
		또, 반복문과 제어문 등을 표현할 수 있어요.
		
		pl/sql에서 대입연산자는 
			:=    이렇게 표현합니다.
			
----------------------------------------------------------------------------------------

연습) 새로운 부서를 등록하는 프로시저를 생성
create or replace procedure insert_dept(
	p_dno dept.dno%type,
	p_dname dept.dname%type,
	p_dloc dept.dloc%type
)
as 
begin
	insert into dept values(p_dno, p_dname, p_dloc);
end;
/			

exec insert_dept(50, '개발3팀', '제주');

-------------------------------------------------------------------------------------------

연습) 부서번호와 부서위치를 매개변수로 전달받아 
				해당부서의 정보를 수정하는 프로시저를 만들어 봅니다
				
create or replace procedure 
update_dloc(
	p_dno dept.dno%type,
	p_dloc dept.dloc%type
)
as
begin
	update dept set dloc = p_dloc where dno = p_dno;
end;
/

exec update_dloc(50, '서교동');


-------------------------------------------------------------------------------------
연습) 부서번호를 매개변수로 전달받아 해당 부서를 삭제하는 
				프로시저를 생성하고 호출 해 봅니다.
				
create or replace procedure delete_dept(
	p_dno dept.dno%type
)
as
begin
	delete dept where dno = p_dno;
end;
/

exec delete_dept(50);

exec delete_dept(10);
		==> "참조무결성"에 위배 되기 때문에 삭제할 수 없어요!
		
		
---------------------------------------------------------------------------------------
연습) 부서번호를 전달받아 해당 부서의 위치를 출력하는 프로시저

set serveroutput on;
create or replace procedure print_dloc(
p_dno dept.dno%type
)
as
	p_dloc dept.dloc%type;
begin
	select dloc into p_dloc from dept where dno = p_dno;
	dbms_output.put_line(p_dloc);
end;
/

exec print_dloc(10);


연습) 부서번호를 전달받아 해당 부서의 위치를 반환하는 프로시저
create or replace procedure get_dloc(
	p_dno in dept.dno%type,
	p_dloc out dept.dloc%type
)
as
begin
	select dloc into p_dloc from dept where dno = p_dno;
end;
/


declare
	result dept.dloc%type;
begin
	get_dloc(10,result);
	dbms_output.put_line(result);
end;
/

--------------------------------------------------------------------------------
cursor의 사용
	==> 프로시저 안에서 select한 행의 수가 여러건 일때는 
			cursor를 사용해야 합니다.
			

연습) 부서위치를 매개변수로 전달받아
			그 위치의 있는 모든 부서명을 출력하는 프로시저를 생성하고 
			호출해 봅니다.

create or replace procedure 
print_dname(
	p_dloc dept.dloc%type
)
as
	p_dname dept.dname%type;
	cursor c is select  dname from dept where dloc = p_dloc;
begin
	open c;
	loop
		fetch c into p_dname;
		exit when c%NOTFOUND;
		dbms_output.put_line(p_dname);
	end loop;
	close c;
end;
/

exec print_dname('서교동');

----------------------------------------------------------------------------------------
트리거 : 	SQL에서의 이벤트 처리를 위한 것으로써 
					어떠한 테이블에 
							이벤트(insert, update, delete)가 일어날 때에
							자동으로 동작하는 프로시저를 말합니다.
						
create table dept_back as select * from dept;		



**트리거를 만드는 방법

create or replace trigger 트리거이름
시점 명령어 on 테이블이름 for each row
declare
	변수명1 자료형
	변수명2 자료형 
begin
	트리거가 해야할 명령어(들)
end;		


**시점에는 before,after가 올 수 있다
**명령어에는 insert, update, delete가 올 수 있다

 dept테이블에 insert가 된 후에 그 똑같은 레코드를 dept_back 테이블에 자동으로 insert하는 트리거를 만들어보고 
 dept에 insert해봅시다
 
 :new
 ==> insert나 update가 된 새로운 행을 의미하는 키워드이다
 
 
 :old
 ==> delete나, update되기전의 행을 의미하는 키워드이다
 
 create or replace trigger trg_afterInsertDept
 after insert on dept for each row
 declare
 begin
 	insert into dept_back values(:new.dno,:new.dname,:new.dloc);
 	end;
 	/
 	
 insert into dept values(50,'개발3팀','제주');	
 
 
 dept테이블에 수정이 되면 자동으로 dept_back의 내용도 수정하도록 트리거를 생성하고 dept테이블의 내용을 수정해본다
 
 create or replace trigger trg_afterUpdateDept
 after update on dept for each row
 declare
 begin
 	update dept_back set dname= :new.dname, dloc= :new.dloc where dno= :new.dno ;
 	end;
 	/
 	
 	update dept set dname='영업3팀', dloc='서교동' where dno=50;
 	
 	
 	
 create or replace trigger trg_afterDeleteDept
 after delete on dept for each row
 declare
 begin
 	delete dept_back where dno= :old.dno;
 end;
 /
 
 delete dept where dno=50;
 	
 
 create table 상품(
 상품번호 number primary key,
 상품명 varchar2(30),
 가격 number,
 재고수량 number
 );
 
 create table 입고(
 입고번호 number primary key,
 상품번호 number references 상품(상품번호),
 입고수량 number,
 입고일 date
 );
 
 insert into 상품 values(100,'색종이',500,0);
 insert into 상품 values(200,'삼각자',700,0);
 insert into 상품 values(300,'딱풀',600,0);
 
 create or replace trigger trg_afterUpdateProduct 
 after insert on 입고 for each row
 declare
 begin
 	update 상품 set 재고수량 = 재고수량 + :new.입고수량 where 상품번호= :new.상품번호;
 end;
 	/ 
 	
 	insert into 입고 values(1,100,10,sysdate);
 	insert into 입고 values(2,200,10,sysdate);
 	insert into 입고 values(3,300,50,sysdate);
 	insert into 입고 values(4,100,100,sysdate);
 	
 create or replace trigger trg_deleteProduct
 after delete on 입고 for each row
 declare
 begin
 	update 상품 set 재고수량= 재고수량 - :old.입고수량 where 상품번호= :old.상품번호;
 end;
 /
 
 delete 입고 where 입고번호=1;
 
 
 create or replace trigger trg_updateProduct
 after update on 입고 for each row
 declare
 begin
 	update 상품 set 재고수량= 재고수량-(:old.입고수량 - :new.입고수량) where 상품번호= :new.상품번호;
 end;
 /
 
 insert into 입고 values(4, 300, 100, sysdate);
 
 
 
 procedure
 빈번하게 사용하는 insert, update, delete, select를 정의해두고 쉽게 사용할 수 있다
 
 trigger
 
 function
사용자가 필요한 함수를 만들ㅇ ㅓ사용할 수 있음
사용자가 select절에서 사용가능
사용자 정의 함수(function)

create or replace function 함수명(매개변수명 자료형) return 자료형
is
	지역변수(들)
begin
	함수가 해야할 문장(들)
	return 값;
end;

create or replace function profit(saleprice number) return number
is
result number;


begin
if saleprice>=30000 then 
result:= saleprice*0.1;
else result:= saleprice*0.05;
and if;
return result;
else


	return result;
end;
/

select bookname, price, saleprice, profit(salerprice) 이익금
from book b, orders o where b.bookid=o.bookid and to_char(sysdate,)


create or replace function Grade(p_custid number) return varchar2
is 
result varchar2(30);
tot number;
begin
select sum(saleprice) into tot from orders  where custid= p_custid;
	if tot>=20000 then
result:= '우수';
else result:= '보통';
end if;
return result;

end;
/


select name,(select sum(saleprice) from orders o where o.custid=c.custid) sum, Grade(custid) grade from customer c;


create or replace function Locate(p_addr varchar2) return varchar2
is
result varchar2(30);
begin
if p_addr like '대한민국%' then
result:= '국내거주';
else result:= '국외거주';
end if;
return result;
end;
/

select name, Locate(address) locate from customer;

select name, Grade(custid) grade, Locate(address) locate from customer order by Locate(address);


select Locate(address) locate,sum(saleprice) sum from customer c, orders o where c.custid=o.custid group by Locate(address);






















c

 

 
 
 
 
 
 
 
 
 
 
 	
							
							
		